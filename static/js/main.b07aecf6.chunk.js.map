{"version":3,"sources":["PlaySpace/PlaySpace.js","ModeSelect/ModeSelect.js","Challenges/Challenges.js","App.js","serviceWorker.js","index.js"],"names":["PlaySpace","props","react_default","a","createElement","board","slice","ModeSelect","onClick","changeEasy","changeMed","changeHard","onOffString","startPosition","resetBoard","score","Challenges","easy","medium","hard","App","state","boardLights","startPos","numOfLights","keys","resetToStart","_this","setState","boardChangeHandler","lightIndex","toggleLight","light","split","count","map","x","parseInt","reduce","b","join","newBoard","level","n","Math","floor","random","length","_this2","this","boardList","cell","index","key","className","src_ModeSelect_ModeSelect","src_PlaySpace_PlaySpace","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b07aecf6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PlaySpace = (props) => {\r\n    return (\r\n        <div>\r\n            <div>{props.board.slice(0, 5)}</div>\r\n            <div>{props.board.slice(5, 10)}</div>\r\n            <div>{props.board.slice(10, 15)}</div>\r\n            <div>{props.board.slice(15, 20)}</div>\r\n            <div>{props.board.slice(20)}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaySpace;","import React from 'react';\r\n\r\nconst ModeSelect = (props) => {\r\n    return (\r\n        <div> \r\n            <h1>Control Panel</h1>\r\n            <div>\r\n                <button onClick={() => props.changeEasy()}>Another (Easy)</button>\r\n                <button onClick={() => props.changeMed()}>Another (Medium)</button>\r\n                <button onClick={() => props.changeHard()}>Another (Hard)</button>\r\n            </div>\r\n            <p>\r\n                Current state: {props.onOffString} <br />\r\n                Start Position: {props.startPosition}\r\n            </p>\r\n            <button onClick={props.resetBoard}>Reset to start position</button>\r\n            <p>Score: {props.score}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModeSelect;","// challenges are initial board setup for users to solve\r\n// I have split them into easy medium and hard\r\n\r\nconst Challenges = {\r\n    easy: [\r\n        \"0000000100011100010000000\", \"0000000100011000001100010\", \"0000000110011110111100110\",\r\n        \"0100011000001000001100010\", \"0101011111011101111101010\", \"0101011011000001101101010\",\r\n        \"0000010101101011010100000\", \"0111010001101011000101110\", \"0111010101110111010101110\",\r\n        \"0010001110000000111000100\"\r\n    ],\r\n\r\n    medium: [\r\n        \"1010100000101010000010101\", \"0101010001000001000101010\", \"0010000000101010000000100\", \r\n        \"1111111111000001111111111\", \"0010000100110110010000100\", \"0000100010001000100010000\",\r\n        \"1010110101000001010110101\", \"1111110001011101000111111\"\r\n    ],\r\n\r\n    hard: [\r\n        \"0000001110011100111000000\", \"0000001010000000101000000\", \"0010001010101010101000100\",\r\n        \"1000101010000000101010001\", \"1111111111110111111111111\", \"1101111011110110111001110\"\r\n    ]\r\n}\r\n\r\nexport default Challenges;","import React, { Component } from 'react';\nimport './App.css';\nimport PlaySpace from './PlaySpace/PlaySpace';\nimport ModeSelect from './ModeSelect/ModeSelect';\nimport Challenges from './Challenges/Challenges';\n\nclass App extends Component {\n  state = {\n    boardLights: \"0000000100011100010000000\",\n    startPos: \"0000000100011100010000000\",\n    numOfLights: 5,\n    keys: \"ABCDEFGHIJKLMNOPQRSTUVWXY\"\n  }\n  \n  resetToStart = () => {\n    this.setState({boardLights: this.state.startPos})\n  }\n\n  // this handler will update the board if one of the lights is clicked\n  boardChangeHandler = (lightIndex) => {\n    const toggleLight = (light) => light === \"0\" ? \"1\" : \"0\";\n    let board = this.state.boardLights.split(\"\");\n    board[lightIndex] = toggleLight(board[lightIndex]);\n    //board[lightIndex] === \"0\" ? board[lightIndex] = \"1\" : board[lightIndex] = \"0\";\n    if (lightIndex > 4) { board[lightIndex-5] = toggleLight(board[lightIndex-5])  }\n    if (lightIndex < 20) { board[lightIndex+5] = toggleLight(board[lightIndex+5])  }\n    if (lightIndex % 5 !== 4) { board[lightIndex+1] = toggleLight(board[lightIndex+1])  }\n    if (lightIndex % 5 !== 0) { board[lightIndex-1] = toggleLight(board[lightIndex-1])  }\n\n    let count = board.map(x => parseInt(x)).reduce((a, b) => a+b);\n\n    this.setState({ boardLights: board.join(\"\"), numOfLights: count });\n  }\n\n  // selects a new start position, depending on the level clicked.\n  newBoard = (level) => {\n    var n=Math.floor(Math.random()*Challenges[level].length);\n    this.setState({ boardLights: Challenges[level][n], startPos: Challenges[level][n] });\n  }\n\n  render() {\n    // boardlist turns the binary on/off string for the lights into \n    //    a list of buttons, class depends on on/off of relevant bit\n    // Keys give buttons a name (A-Z) \n    //     which is intended to be used in later version for checking optimum solution\n    let boardList = this.state.boardLights.split(\"\").map((cell, index) => {\n      return cell === \"0\" ? \n        <button \n          key={this.state.keys[index]} \n          className=\"lightOff\" \n          onClick={() => this.boardChangeHandler(index)} >{this.state.keys[index]}</button> : \n        <button \n          key={this.state.keys[index]} \n          className=\"lightOn\"  \n          onClick={() => this.boardChangeHandler(index)} >{this.state.keys[index]}</button>\n    });\n\n    return (\n      <div className=\"App\">\n        <ModeSelect \n          onOffString={this.state.boardLights} \n          startPosition={this.state.startPos}\n          score={this.state.numOfLights}\n          changeEasy={() => this.newBoard(\"easy\")}\n          changeMed={() => this.newBoard(\"medium\")}\n          changeHard={() => this.newBoard(\"hard\")}\n          resetBoard={this.resetToStart} />\n        <PlaySpace board={boardList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}