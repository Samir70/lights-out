{"version":3,"sources":["Congrats/Lights-Out.png","PlaySpace/PlaySpace.js","Congrats/Congrats.js","ModeSelect/ModeSelect.js","Challenges/Challenges.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PlaySpace","props","react_default","a","createElement","board","slice","Congrats","quickSol","solution","split","sort","filter","x","i","solutionMessage","length","className","src","picture","alt","ModeSelect","onClick","changeEasy","changeMed","changeHard","onOffString","buttonsPressed","resetBoard","score","Challenges","easy","medium","hard","App","state","boardLights","startPos","lightsPressed","numOfLights","keys","resetToStart","_this","setState","countLights","map","parseInt","reduce","b","boardChangeHandler","lightIndex","toggleLight","light","join","newBoard","level","n","Math","floor","random","_this2","this","boardList","cell","index","key","src_ModeSelect_ModeSelect","src_Congrats_Congrats","src_PlaySpace_PlaySpace","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8e54c1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Lights-Out.a1bd7e6b.png\";","import React from 'react';\r\n\r\nconst PlaySpace = (props) => {\r\n    return (\r\n        <div>\r\n            <div>{props.board.slice(0, 5)}</div>\r\n            <div>{props.board.slice(5, 10)}</div>\r\n            <div>{props.board.slice(10, 15)}</div>\r\n            <div>{props.board.slice(15, 20)}</div>\r\n            <div>{props.board.slice(20)}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaySpace;","import React from 'react';\r\nimport './Congrats.css';\r\nimport picture from \"./Lights-Out.png\";\r\n\r\nconst Congrats = (props) => {\r\n    // check if props.solution has a key pressed twice\r\n    // decide on solution message depending on if a key was pressed twice\r\n    var quickSol = props.solution.split(\"\").sort().filter((x, i, a) => x != a[i+1] && x!=a[i-1] );\r\n    var solutionMessage = \"No special solution message\";\r\n    if (quickSol.length < props.solution.length) {\r\n        solutionMessage = \"There was a quicker solution. There's no need to press a button twice.\"\r\n    } else {solutionMessage = \"Well done! You pressed each of these lights: \"+quickSol+\" once. Genius!\"}\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"colourChange\">Congratulations! You have turned off all the lights</p>\r\n            <p>{solutionMessage}</p>\r\n            <p>Press a level button to select a new puzzle</p>\r\n            <img className=\"congratSpin\" src={picture} alt=\"Congratulations!\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Congrats;","import React from 'react';\r\n\r\nconst ModeSelect = (props) => {\r\n    return (\r\n        <div> \r\n            <h1>Control Panel</h1>\r\n            <div>\r\n                <button onClick={() => props.changeEasy()}>Another (Easy)</button>\r\n                <button onClick={() => props.changeMed()}>Another (Medium)</button>\r\n                <button onClick={() => props.changeHard()}>Another (Hard)</button>\r\n            </div>\r\n            <p>\r\n                Current state: {props.onOffString} <br />\r\n                Lights pressed: {props.buttonsPressed}\r\n            </p>\r\n            <button onClick={props.resetBoard}>Reset to start position</button>\r\n            <p>Score: {props.score}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModeSelect;","// challenges are initial board setup for users to solve\r\n// I have split them into easy medium and hard\r\n\r\nconst Challenges = {\r\n    easy: [\r\n        \"0000000100011100010000000\", \"0000000100011000001100010\", \"0000000110011110111100110\",\r\n        \"0000011011000001000111011\", \"0000010101101011010100000\", \"0000010001011100000011011\",\r\n        \"0100011000001000001100010\", \"0101011111011101111101010\", \"0101011011000001101101010\",\r\n        \"0111010001101011000101110\", \"0111010101110111010101110\", \"0000000000101010000000000\",\r\n        \"0010001110000000111000100\", \"1100000100000100000100001\", \"0000000010011110111010000\"\r\n    ],\r\n\r\n    medium: [\r\n        \"1010100000101010000010101\", \"0101010001000001000101010\", \"0010000000101010000000100\", \r\n        \"1111111111000001111111111\", \"0010000100110110010000100\", \"0000100010001000100010000\",\r\n        \"1010110101000001010110101\", \"1111110001011101000111111\", \"0100010100010100010100010\", \r\n        \"0011101011101011101011100\", \"0000000000101011000111011\", \"1111101110011101111111111\",\r\n        \"0010000100000000010000100\", \"0000001010001000010000100\", \"0000000000110110000000000\"\r\n    ],\r\n\r\n    hard: [\r\n        \"0000001110011100111000000\", \"0000000101000001010000000\", \"0000100001000010000000000\", \r\n        \"0000001010000000101000000\", \"0010001010101010101000100\", \"1000101010001000000000000\",\r\n        \"1000101010000000101010001\", \"1111111111110111111111111\", \"1101111011110110111001110\", \r\n        \"0011001000001000001001100\", \"0001000110001000110001000\", \"1000100000001000000000000\",\r\n        \"0000000000001000000001010\", \"1000000000000000000000001\", \"0000010001000000000000000\",\r\n        \"0000000010000000000000000\", \"0000000000001000000000000\", \"0000000000000000000011011\"\r\n    ]\r\n}\r\n\r\nexport default Challenges;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PlaySpace from './PlaySpace/PlaySpace';\r\nimport Congrats from './Congrats/Congrats';\r\nimport ModeSelect from './ModeSelect/ModeSelect';\r\nimport Challenges from './Challenges/Challenges';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    boardLights: \"0000000100011100010000000\",\r\n    startPos: \"0000000100011100010000000\",\r\n    lightsPressed: \"\",\r\n    numOfLights: 5,\r\n    keys: \"ABCDEFGHIJKLMNOPQRSTUVWXY\"\r\n  }\r\n  \r\n  resetToStart = () => {\r\n    this.setState({\r\n      boardLights: this.state.startPos, \r\n      lightsPressed: \"\",\r\n      numOfLights: this.countLights(this.state.startPos) })\r\n  }\r\n\r\n  // countLights takes a string of binary indicators for the board, and counts the ones\r\n  countLights = (board) => {\r\n    return board.split(\"\").map(x => parseInt(x)).reduce((a, b) => a+b);\r\n  }\r\n\r\n  // this handler will update the board if one of the lights is clicked\r\n  boardChangeHandler = (lightIndex) => {\r\n    const toggleLight = (light) => light === \"0\" ? \"1\" : \"0\";\r\n    let board = this.state.boardLights.split(\"\");\r\n    board[lightIndex] = toggleLight(board[lightIndex]);\r\n    if (lightIndex > 4) { board[lightIndex-5] = toggleLight(board[lightIndex-5])  }\r\n    if (lightIndex < 20) { board[lightIndex+5] = toggleLight(board[lightIndex+5])  }\r\n    if (lightIndex % 5 !== 4) { board[lightIndex+1] = toggleLight(board[lightIndex+1])  }\r\n    if (lightIndex % 5 !== 0) { board[lightIndex-1] = toggleLight(board[lightIndex-1])  }\r\n\r\n    this.setState({ \r\n      boardLights: board.join(\"\"), \r\n      lightsPressed: this.state.lightsPressed + this.state.keys[lightIndex],\r\n      numOfLights: this.countLights(board.join(\"\")) });\r\n  }\r\n\r\n  // selects a new start position, depending on the level clicked.\r\n  newBoard = (level) => {\r\n    var n=Math.floor(Math.random()*Challenges[level].length);\r\n    this.setState({ \r\n      boardLights: Challenges[level][n], \r\n      startPos: Challenges[level][n], \r\n      lightsPressed: \"\",\r\n      numOfLights: this.countLights(Challenges[level][n]) });\r\n  }\r\n\r\n  render() {\r\n    // boardlist turns the binary on/off string for the lights into \r\n    //    a list of buttons, class depends on on/off of relevant bit\r\n    // Keys give buttons a name (A-Z) \r\n    //     which is intended to be used in later version for checking optimum solution\r\n    let boardList = this.state.boardLights.split(\"\").map((cell, index) => {\r\n      return cell === \"0\" ? \r\n        <button \r\n          key={this.state.keys[index]} \r\n          className=\"lightOff\" \r\n          onClick={() => this.boardChangeHandler(index)} >{this.state.keys[index]}</button> : \r\n        <button \r\n          key={this.state.keys[index]} \r\n          className=\"lightOn\"  \r\n          onClick={() => this.boardChangeHandler(index)} >{this.state.keys[index]}</button>\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <ModeSelect \r\n          onOffString={this.state.boardLights} \r\n          buttonsPressed={this.state.lightsPressed}\r\n          score={this.state.numOfLights}\r\n          changeEasy={() => this.newBoard(\"easy\")}\r\n          changeMed={() => this.newBoard(\"medium\")}\r\n          changeHard={() => this.newBoard(\"hard\")}\r\n          resetBoard={this.resetToStart} />\r\n          {this.state.numOfLights === 0 ? \r\n            <Congrats solution={this.state.lightsPressed} /> : \r\n            <PlaySpace board={boardList} /> }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}